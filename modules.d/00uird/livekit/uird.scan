#!/bin/bash
# import livekitlib in uird  or in system
. /livekitlib 2>/dev/null || . $(dirname $(which uird.scan))/livekitlib 2>/dev/null

[ -f $BIN_BLKID ] || BIN_BLKID=/sbin/blkid
. /etc/initvars 2>/dev/null

#test block
#+++++++++++++++++
# . ./livekitlib 2>/dev/null
#BASECFG=./testcfg
#[ -f $BASECFG ] || > $BASECFG
#+++++++++++++++++

FIND_PARAMS=$(getpar $UIRD_FIND_PARAMS 1  | tr ";,_" " ")
[ -d /sysroot ] && FIND_PARAMS=""

>/tmp/uird_sources
>/tmp/uird_homes

mount_cycle() {
	local DIR FOUND PRESERVE
	for SCANDEVICE in $(list_block_devices) $(list_mounted_directories); do
		DIR=$(device_mountdir $SCANDEVICE)
		ismountpoint $DIR
		if [ $? -eq 0 ]; then
			PRESERVE="true"
		else
			mount_device $SCANDEVICE $DIR ro
			if [ $? -ne 0 ]; then
				echo "can't mount $SCANDEVICE" >&2
				continue
			fi
			PRESERVE="false"
		fi
		[ -d $DIR ] && $1 $2
		[ $PRESERVE != "true" ] && (
			fumount $DIR
			rmdir $DIR 2>/dev/null
		)
	done

}

find_markers() {
	local a b
	[ -f $DIR/sbin/init ] && LEGACY="$LEGACY $SCANDEVICE"
	for a in $(find $DIR $FIND_PARAMS -type f \( -name $(cmdline_value uird.ro | sed 's/,/ -or -name /g') \) -exec dirname {} \;); do
		echo $a | sed "s:$DIR:$SCANDEVICE:" >>/tmp/uird_sources
	done
	for b in $(find $DIR $FIND_PARAMS -type f -name "*.bashrc" -exec dirname {} \;); do
		echo $b | grep -qE "/etc|/initrd|/skel|/root" || dirname $b | sed "s:$DIR:$SCANDEVICE:" >>/tmp/uird_homes
	done
}

listing() {
	local a int
	mount_cycle find_markers
	int=1
	echo LEGACY:
	for a in $LEGACY; do
		echo "legacy:${int} - ${a}  ( $($BIN_BLKID | grep ${a} | cut -d " " -f2) )"
		int=$(expr $int + 1)
	done

	echo ""
	echo SOURCES:
	cat /tmp/uird_sources | uniq
	echo ""
	echo HOMES:
	cat /tmp/uird_homes | sort | uniq
	echo ""
	echo SWAP:
	list_swap_devices
}

legacy() {
	if echo $1 | grep -q "^[[:digit:]]*$"; then
		int=$1
		echo $(mount_cycle find_legacy)
	else
		file=$1
		echo $file | grep -q "@" && file=$(uuid_label_to_dev $file)
		found=$(find_data ${file}/sbin/init | sed 's:/sbin/init::')
		if [ -z $found ]; then
			return
		else
			echo /dev$found
		fi
	fi
}

find_legacy() {
	if [ -f $DIR/sbin/init ]; then
		if [ $int -eq 1 ]; then
			echo $SCANDEVICE
			break
		fi
		int=$(($int - 1))
		[ $int -le 1 ] && break
	fi
}

legacy_cfg() {
	local dev
	[ -d /sysroot ] || exit 1
	dev=$2
	[ -z $2 ] && dev=1
	LEGACY=$(legacy $dev)
	if [ -z $LEGACY ]; then
		echo "can't find legacy linux installation"
		exit 2
	fi
	if grep -q uird.from $BASECFG; then
		sed -i "s:^uird\.from=.*:uird\.from=$LEGACY:" $BASECFG
	else
		echo "uird.from=$LEGACY" >>$BASECFG
	fi
	if grep -q uird.ro $BASECFG; then
		sed -i 's:^uird\.ro=.*:uird\.ro=\*layer-base/0:' $BASECFG
	else
		echo "uird.ro=*layer-base/0" >>$BASECFG
	fi
	if grep -q uird.load $BASECFG; then
		sed -i 's:^uird\.load=.*:uird\.load=\*:' $BASECFG
	else
		echo "uird.load=*" >>$BASECFG
	fi
}

modules() {
	[ -d /sysroot ] || exit 1
	SOURCES=$(for a in $(cat /tmp/uird_sources | sort | uniq | grep -E "base|modules"); do dirname $a; done | sort | uniq)
	if [ -z $SOURCES ]; then
		echo "can't find modules"
		exit 3
	fi
	if grep -q uird.from $BASECFG; then
		sed -i "s:^uird\.from=.*:uird\.from=$(echo $SOURCES | sed 's: :,:g'):" $BASECFG
	else
		echo "uird.from=$(echo $SOURCES | sed 's: :,:g')" >>$BASECFG
	fi

	grep -q uird.ro $BASECFG || echo "uird.ro=*.xzm,*.pfs" >>$BASECFG
	grep -q uird.load $BASECFG || echo "uird.load=/base/,/modules/" >>$BASECFG

}

echo "Please wait, disks are scanning....."
echo ""

mode="--scan"
[ -z $1 ] || mode=$1

case "$mode" in
--legacy) legacy_cfg $@ ;;
--modules) modules ;;
--scan) listing ;;
esac
